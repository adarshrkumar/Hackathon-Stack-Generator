---
import App from '../../layouts/App.astro';
import '../../styles/pages/app/chat.scss';
---

<App title="AI Chat">
    <div class="chat-container">
        <div class="chat-header">
            <h1><i class="fa-solid fa-comments"></i> AI Chat Assistant</h1>
            <p class="subtitle">Powered by AWS Bedrock & Llama 3.1</p>
        </div>

        <div class="chat-wrapper">
            <div class="chat-messages" id="chatMessages">
                <div class="welcome-message">
                    <i class="fa-solid fa-robot"></i>
                    <p>Hello! I'm your AI assistant. Ask me anything!</p>
                </div>
            </div>

            <div class="chat-input-container">
                <div class="error-banner" id="errorBanner"></div>
                <div class="input-wrapper">
                    <textarea
                        id="messageInput"
                        placeholder="Type your message here..."
                        rows="1"
                    ></textarea>
                    <button id="sendButton" class="send-btn">
                        <i class="fa-solid fa-paper-plane"></i>
                    </button>
                </div>
                <div class="chat-info">
                    <span id="threadInfo">New conversation</span>
                    <button id="newChatBtn" class="new-chat-btn">
                        <i class="fa-solid fa-plus"></i> New Chat
                    </button>
                </div>
            </div>
        </div>
    </div>
</App>

<script>
    let currentThreadId: string | null = null;
    let messageHistory: Array<{ role: 'user' | 'assistant', content: string }> = [];

    const chatMessages = document.getElementById('chatMessages')!;
    const messageInput = document.getElementById('messageInput') as HTMLTextAreaElement;
    const sendButton = document.getElementById('sendButton') as HTMLButtonElement;
    const errorBanner = document.getElementById('errorBanner')!;
    const threadInfo = document.getElementById('threadInfo')!;
    const newChatBtn = document.getElementById('newChatBtn')!;

    // Auto-resize textarea
    messageInput.addEventListener('input', () => {
        messageInput.style.height = 'auto';
        messageInput.style.height = messageInput.scrollHeight + 'px';
    });

    // Send message on Enter (Shift+Enter for new line)
    messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });

    sendButton.addEventListener('click', sendMessage);

    newChatBtn.addEventListener('click', () => {
        if (confirm('Start a new conversation?')) {
            currentThreadId = null;
            messageHistory = [];
            chatMessages.innerHTML = `
                <div class="welcome-message">
                    <i class="fa-solid fa-robot"></i>
                    <p>Hello! I'm your AI assistant. Ask me anything!</p>
                </div>
            `;
            threadInfo.textContent = 'New conversation';
            hideError();
        }
    });

    async function sendMessage() {
        const message = messageInput.value.trim();
        if (!message) return;

        // Clear input
        messageInput.value = '';
        messageInput.style.height = 'auto';

        // Add user message to UI
        addMessage('user', message);
        messageHistory.push({ role: 'user', content: message });

        // Disable input
        setInputState(false);

        // Add loading indicator
        const loadingEl = addLoadingMessage();

        try {
            const requestBody: { text: string; id?: string } = { text: message };
            if (currentThreadId) {
                requestBody.id = currentThreadId;
            }

            const response = await fetch('/api/message/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestBody),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Request failed');
            }

            // Remove loading indicator
            loadingEl.remove();

            // Add assistant message
            addMessage('assistant', data.generatedText);
            messageHistory.push({ role: 'assistant', content: data.generatedText });

            // Update thread info
            if (data.id) {
                currentThreadId = data.id;
                threadInfo.textContent = `Thread: ${data.generatedTitle || data.id.substring(0, 8)}`;
            }

            hideError();
        } catch (error) {
            loadingEl.remove();
            showError(error instanceof Error ? error.message : String(error));
            // Remove the user message from history since request failed
            messageHistory.pop();
        } finally {
            setInputState(true);
            messageInput.focus();
        }
    }

    function addMessage(role: 'user' | 'assistant', content: string) {
        const messageEl = document.createElement('div');
        messageEl.className = `message ${role}`;

        const icon = role === 'user' ? 'fa-user' : 'fa-robot';

        messageEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid ${icon}"></i>
            </div>
            <div class="message-content">${escapeHtml(content)}</div>
        `;

        chatMessages.appendChild(messageEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function addLoadingMessage(): HTMLElement {
        const loadingEl = document.createElement('div');
        loadingEl.className = 'message assistant loading';
        loadingEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid fa-robot"></i>
            </div>
            <div class="message-content">
                <div class="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;

        chatMessages.appendChild(loadingEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        return loadingEl;
    }

    function setInputState(enabled: boolean) {
        messageInput.disabled = !enabled;
        sendButton.disabled = !enabled;
    }

    function showError(message: string) {
        errorBanner.textContent = `Error: ${message}`;
        errorBanner.classList.add('show');
    }

    function hideError() {
        errorBanner.textContent = '';
        errorBanner.classList.remove('show');
    }

    function escapeHtml(text: string): string {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
</script>
