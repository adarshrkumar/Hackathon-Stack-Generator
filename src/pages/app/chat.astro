---
/**
  * AI Chat Interface Page
  *
  * This is the main chat interface for the Stack Generator application.
  * It provides a conversational AI experience powered by AWS Bedrock and Llama 3.1.
  *
  * Features:
  * - Real-time AI chat responses
  * - Thread-based conversation history
  * - Auto-resizing textarea input
  * - Loading indicators
  * - Error handling and display
  * - New chat functionality
  * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)
  *
  * Architecture:
  * - Uses the App layout (Nav + Footer)
  * - Client-side TypeScript for interactivity
  * - Communicates with /api/message/generate endpoint
  * - Stores thread ID for conversation context
  */

// Import the application layout
import App from '../../layouts/App.astro';
---

<!-- Chat Page Content -->
<App title="Stack Generator">
    <!-- Chat Header Section -->
    <div class="chat-header">
        <h1><i class="fa-solid fa-layer-group"></i> Stack Generator</h1>
        <p class="subtitle">Build your perfect tech stack with AI guidance</p>
    </div>

    <!-- Main Chat Wrapper -->
    <div class="chat-wrapper">
        <!-- Chat Messages Container (scrollable) -->
        <div class="chat-messages" id="chatMessages">
            <!-- Messages will be added dynamically -->
        </div>

        <!-- Chat Input Section (fixed at bottom) -->
        <div class="chat-input-container">
            <!-- Error Banner (hidden by default) -->
            <div class="error-banner" id="errorBanner"></div>

            <!-- Input Wrapper (textarea + send button) -->
            <div class="input-wrapper">
                <!-- Message Textarea (auto-resizing) -->
                <textarea
                    id="messageInput"
                    placeholder="Type your message here..."
                    rows="1"
                ></textarea>

                <!-- Send Button -->
                <button id="sendButton" class="send-btn">
                    <i class="fa-solid fa-paper-plane"></i>
                </button>
            </div>

            <!-- Chat Info Bar (thread info + new chat button) -->
            <div class="chat-info">
                <span id="threadInfo">New conversation</span>
                <button id="newChatBtn" class="new-chat-btn">
                    <i class="fa-solid fa-plus"></i> New Chat
                </button>
            </div>
        </div>
    </div>
</App>

<!-- SCSS Styles -->
<style lang="scss">
    @use '../../styles/pages/app/chat.scss' as *;
</style>

<!-- Client-Side TypeScript -->
<script>
    /**
      * CLIENT-SIDE CHAT LOGIC WITH SELECTION PROMPTS
      *
      * This script handles:
      * - Multi-step selection prompts for tech stack preferences
      * - Message sending and receiving
      * - UI updates (adding messages, loading indicators)
      * - Thread management
      * - Error handling
      * - Markdown rendering for AI responses
      */

    import { marked } from 'marked';

    // Configure marked for better rendering
    marked.setOptions({
        breaks: true,  // Convert line breaks to <br>
        gfm: true,     // GitHub Flavored Markdown
    });

    /**
     * SELECTION PROMPTS CONFIGURATION
     */

    const selectionQuestions = [
        {
            question: "What **front-end framework** do you prefer?",
            category: "frontend",
            options: ["React", "Vue.js", "Angular", "Svelte", "Next.js", "Other/Not Sure"]
        },
        {
            question: "What **backend technology** do you prefer?",
            category: "backend",
            options: ["Node.js", "Python", "Java", "Go", "PHP", "Ruby", "Other/Not Sure"]
        },
        {
            question: "How do you want to handle **styling**?",
            category: "styling",
            options: ["Tailwind CSS", "SCSS/SASS", "CSS Modules", "Styled Components", "Bootstrap", "Material-UI", "Other/Not Sure"]
        },
        {
            question: "What **database** do you need?",
            category: "database",
            options: ["PostgreSQL", "MongoDB", "MySQL", "Redis", "DynamoDB", "Firebase", "Other/Not Sure"]
        },
        {
            question: "How do you want to handle **user authentication**?",
            category: "auth",
            options: ["Auth0", "Firebase Auth", "AWS Cognito", "Clerk", "Supabase", "Custom JWT", "Other/Not Sure"]
        },
        {
            question: "Any **additional services** you need? (select multiple or skip)",
            category: "additional",
            multiSelect: true,
            options: ["CDN", "Analytics", "Email Service", "File Storage", "Payment Processing", "Search", "Monitoring", "CI/CD"]
        }
    ];

    let currentQuestionIndex = 0;
    const userSelections: Record<string, string | string[]> = {};
    let selectionInProgress = true;

    /**
     * Chat State Variables
     */

    // LocalStorage key for thread ID persistence
    const THREAD_ID_KEY = 'stack-generator-thread-id';

    // Current conversation thread ID (null for new conversations)
    // Load from localStorage if available to persist across page reloads
    let currentThreadId: string | null = localStorage.getItem(THREAD_ID_KEY);

    // In-memory message history (for reference, not sent to API)
    let messageHistory: Array<{ role: 'user' | 'assistant', content: string }> = [];

    /**
     * DOM Element References
     */
    const chatMessages = document.getElementById('chatMessages')!;
    const messageInput = document.getElementById('messageInput') as HTMLTextAreaElement;
    const sendButton = document.getElementById('sendButton') as HTMLButtonElement;
    const errorBanner = document.getElementById('errorBanner')!;
    const threadInfo = document.getElementById('threadInfo')!;
    const newChatBtn = document.getElementById('newChatBtn')!;

    /**
     * SELECTION PROMPT FUNCTIONS (Chat Style)
     */

    /**
     * Add a selection question message
     */
    function addSelectionQuestion() {
        if (currentQuestionIndex >= selectionQuestions.length) {
            finishSelections();
            return;
        }

        const q = selectionQuestions[currentQuestionIndex];

        // Create question message
        const messageEl = document.createElement('div');
        messageEl.className = 'message assistant selection-message';

        // Build options HTML
        let optionsHTML = '<div class="selection-options-inline">';

        q.options.forEach((option, index) => {
            optionsHTML += `
                <button class="option-btn" data-category="${q.category}" data-value="${option}" data-index="${index}">
                    ${option}
                </button>
            `;
        });

        // Add skip button for last question if it's multi-select
        if (q.multiSelect) {
            optionsHTML += `
                <button class="option-btn skip-btn-inline" data-action="done">
                    Done / Skip
                </button>
            `;
        }

        optionsHTML += '</div>';

        messageEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid fa-robot"></i>
            </div>
            <div class="message-content">
                ${marked.parse(q.question)}
                ${optionsHTML}
                <p class="selection-hint">${q.multiSelect ? 'You can select multiple options' : 'Click an option to continue'}</p>
            </div>
        `;

        chatMessages.appendChild(messageEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Add click handlers to option buttons
        const optionBtns = messageEl.querySelectorAll('.option-btn');
        optionBtns.forEach(btn => {
            btn.addEventListener('click', handleOptionClick);
        });

        // Disable input during selection
        messageInput.disabled = true;
        sendButton.disabled = true;
    }

    /**
     * Handle option button click
     */
    function handleOptionClick(event: Event) {
        const button = event.target as HTMLButtonElement;
        const category = button.dataset.category;
        const value = button.dataset.value;
        const action = button.dataset.action;
        const q = selectionQuestions[currentQuestionIndex];

        if (action === 'done') {
            // Finish multi-select question
            proceedToNext();
            return;
        }

        if (!category || !value) return;

        // Toggle selection for multi-select
        if (q.multiSelect) {
            button.classList.toggle('selected');

            // Update selections
            const selectedBtns = document.querySelectorAll(`.option-btn[data-category="${category}"].selected`);
            const values = Array.from(selectedBtns).map(btn => (btn as HTMLButtonElement).dataset.value!);

            if (values.length > 0) {
                userSelections[category] = values;
            } else {
                delete userSelections[category];
            }
        } else {
            // Single select - save and proceed
            userSelections[category] = value;

            // Highlight selected option
            button.classList.add('selected');

            // Show user's choice as a message
            addMessage('user', value);

            // Disable all option buttons
            const allBtns = document.querySelectorAll('.selection-options-inline .option-btn');
            allBtns.forEach(btn => {
                (btn as HTMLButtonElement).disabled = true;
            });

            // Move to next question after short delay
            setTimeout(() => {
                proceedToNext();
            }, 500);
        }
    }

    /**
     * Proceed to next question
     */
    function proceedToNext() {
        currentQuestionIndex++;

        if (currentQuestionIndex < selectionQuestions.length) {
            // Show next question
            setTimeout(() => {
                addSelectionQuestion();
            }, 300);
        } else {
            // All questions answered
            finishSelections();
        }
    }

    /**
     * Finish selections and generate AI prompt
     */
    async function finishSelections() {
        selectionInProgress = false;

        // Re-enable input
        messageInput.disabled = false;
        sendButton.disabled = false;

        // Build summary message
        let summary = "Perfect! Here's your tech stack:\n\n";
        if (userSelections.frontend) summary += `**Frontend:** ${userSelections.frontend}\n`;
        if (userSelections.backend) summary += `**Backend:** ${userSelections.backend}\n`;
        if (userSelections.styling) summary += `**Styling:** ${userSelections.styling}\n`;
        if (userSelections.database) summary += `**Database:** ${userSelections.database}\n`;
        if (userSelections.auth) summary += `**Auth:** ${userSelections.auth}\n`;
        if (userSelections.additional && Array.isArray(userSelections.additional) && userSelections.additional.length > 0) {
            summary += `**Additional:** ${userSelections.additional.join(', ')}\n`;
        }

        summary += "\nLet me provide detailed recommendations...";

        // Add summary as assistant message
        const summaryEl = document.createElement('div');
        summaryEl.className = 'message assistant';
        summaryEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid fa-robot"></i>
            </div>
            <div class="message-content">
                ${marked.parse(summary)}
            </div>
        `;
        chatMessages.appendChild(summaryEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Build detailed AI prompt
        const aiPrompt = buildDetailedPrompt(userSelections);

        // Auto-send to AI
        messageInput.value = aiPrompt;
        await sendMessage();
        messageInput.value = '';
    }

    /**
     * Build detailed prompt for AI
     */
    function buildDetailedPrompt(selections: Record<string, string | string[]>): string {
        let prompt = "Based on these technology preferences:\n\n";

        if (selections.frontend) prompt += `- Frontend: ${selections.frontend}\n`;
        if (selections.backend) prompt += `- Backend: ${selections.backend}\n`;
        if (selections.styling) prompt += `- Styling: ${selections.styling}\n`;
        if (selections.database) prompt += `- Database: ${selections.database}\n`;
        if (selections.auth) prompt += `- Authentication: ${selections.auth}\n`;
        if (selections.additional && Array.isArray(selections.additional)) {
            prompt += `- Additional Services: ${selections.additional.join(', ')}\n`;
        }

        prompt += "\nProvide:\n";
        prompt += "1. Why these technologies work well together\n";
        prompt += "2. Specific cloud providers/services from your knowledge base\n";
        prompt += "3. Integration best practices\n";
        prompt += "4. Potential challenges and solutions\n";
        prompt += "5. Estimated costs and complexity";

        return prompt;
    }

    /**
     * Initialize selection flow
     */
    function initializeChat() {
        // Add welcome message
        const welcomeEl = document.createElement('div');
        welcomeEl.className = 'message assistant';
        welcomeEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid fa-robot"></i>
            </div>
            <div class="message-content">
                <p><strong>Welcome to Stack Generator!</strong></p>
                <p>I'll help you build the perfect tech stack for your project. Let's start with a few questions...</p>
            </div>
        `;
        chatMessages.appendChild(welcomeEl);

        // Start first question
        setTimeout(() => {
            addSelectionQuestion();
        }, 500);
    }

    // Start the selection flow
    initializeChat();

    /**
     * Auto-Resize Textarea
     *
     * Automatically adjusts the height of the textarea as the user types
     * to accommodate multi-line messages without manual scrolling
     */
    messageInput.addEventListener('input', () => {
        messageInput.style.height = 'auto';  // Reset height
        messageInput.style.height = messageInput.scrollHeight + 'px';  // Set to content height
    });

    /**
     * Keyboard Shortcut: Enter to Send
     *
     * - Enter: Send message
     * - Shift+Enter: Insert newline (default textarea behavior)
     */
    messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();  // Prevent newline
            sendMessage();       // Send the message
        }
    });

    /**
     * Send Button Click Handler
     */
    sendButton.addEventListener('click', sendMessage);

    /**
     * New Chat Button Handler
     *
     * Prompts the user to confirm starting a new conversation,
     * then resets the chat state, localStorage, and UI
     */
    newChatBtn.addEventListener('click', () => {
        if (confirm('Start a new conversation?')) {
            // Reset state
            currentThreadId = null;
            messageHistory = [];

            // Clear thread ID from localStorage
            localStorage.removeItem(THREAD_ID_KEY);

            // Reset selection state
            currentQuestionIndex = 0;
            Object.keys(userSelections).forEach(key => delete userSelections[key]);
            selectionInProgress = true;

            // Clear chat messages
            chatMessages.innerHTML = '';

            // Re-enable input
            messageInput.disabled = false;
            sendButton.disabled = false;

            // Update thread info
            threadInfo.textContent = 'New conversation';

            // Clear any errors
            hideError();

            // Restart the selection flow
            initializeChat();
        }
    });

    /**
     * Send Message Function
     *
     * Handles the complete message sending flow:
     * 1. Validate input
     * 2. Add user message to UI
     * 3. Disable input while processing
     * 4. Send request to API
     * 5. Handle response or errors
     * 6. Re-enable input
     */
    async function sendMessage() {
        // Get and validate message text
        const message = messageInput.value.trim();
        if (!message) return;  // Don't send empty messages

        // Clear input and reset height
        messageInput.value = '';
        messageInput.style.height = 'auto';

        // Add user message to UI immediately for better UX
        addMessage('user', message);
        messageHistory.push({ role: 'user', content: message });

        // Disable input while waiting for response
        setInputState(false);

        // Show loading indicator
        const loadingEl = addLoadingMessage();

        try {
            /**
             * Prepare API Request
             *
             * Include thread ID if this is a continuing conversation
             * Otherwise, the API will create a new thread
             */
            const requestBody: { text: string; id?: string } = { text: message };
            if (currentThreadId) {
                requestBody.id = currentThreadId;
            }

            /**
             * Send Request to API
             *
             * POST to /api/message/generate with the user's message
             * and optional thread ID
             */
            const response = await fetch('/api/message/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestBody),
            });

            // Parse JSON response
            const data = await response.json();

            // Check for HTTP errors
            if (!response.ok) {
                throw new Error(data.error || 'Request failed');
            }

            // Remove loading indicator
            loadingEl.remove();

            /**
             * Add AI Response to UI
             *
             * Display the generated text from the AI model
             */
            addMessage('assistant', data.generatedText);
            messageHistory.push({ role: 'assistant', content: data.generatedText });

            /**
             * Update Thread Info
             *
             * Store the thread ID for future messages
             * Save to localStorage for persistence across page reloads
             * Display the conversation title in the UI
             */
            if (data.id) {
                currentThreadId = data.id;
                localStorage.setItem(THREAD_ID_KEY, data.id);
                threadInfo.textContent = `Thread: ${data.generatedTitle || data.id.substring(0, 8)}`;
            }

            // Clear any previous errors
            hideError();

        } catch (error) {
            /**
             * Error Handling
             *
             * Display error to user and remove loading indicator
             * Also remove the user's message from history since it failed
             */
            loadingEl.remove();
            showError(error instanceof Error ? error.message : String(error));

            // Remove the user message from history since request failed
            messageHistory.pop();

        } finally {
            /**
             * Re-enable Input
             *
             * Allow user to send another message and focus the input
             */
            setInputState(true);
            messageInput.focus();
        }
    }

    /**
     * Add Message to UI
     *
     * Creates a message element and appends it to the chat messages container
     * AI messages are rendered as markdown for better formatting
     *
     * @param role - 'user' or 'assistant'
     * @param content - The message text
     */
    function addMessage(role: 'user' | 'assistant', content: string) {
        // Create message container
        const messageEl = document.createElement('div');
        messageEl.className = `message ${role}`;

        // Select appropriate icon
        const icon = role === 'user' ? 'fa-user' : 'fa-robot';

        // Format content based on role
        let formattedContent: string;
        if (role === 'assistant') {
            // Render markdown for AI responses
            formattedContent = marked.parse(content) as string;
        } else {
            // Escape HTML for user messages to prevent XSS
            formattedContent = escapeHtml(content).replace(/\n/g, '<br>');
        }

        // Build message HTML with icon and content
        messageEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid ${icon}"></i>
            </div>
            <div class="message-content">${formattedContent}</div>
        `;

        // Append to chat and scroll to bottom
        chatMessages.appendChild(messageEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    /**
     * Add Loading Message
     *
     * Creates a loading indicator message to show while waiting for AI response
     *
     * @returns The loading element (so it can be removed later)
     */
    function addLoadingMessage(): HTMLElement {
        const loadingEl = document.createElement('div');
        loadingEl.className = 'message assistant loading';

        // Create animated typing indicator
        loadingEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid fa-robot"></i>
            </div>
            <div class="message-content">
                <div class="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;

        // Append and scroll to bottom
        chatMessages.appendChild(loadingEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        return loadingEl;
    }

    /**
     * Set Input State
     *
     * Enable or disable the message input and send button
     * Used to prevent multiple simultaneous messages
     *
     * @param enabled - true to enable input, false to disable
     */
    function setInputState(enabled: boolean) {
        messageInput.disabled = !enabled;
        sendButton.disabled = !enabled;
    }

    /**
     * Show Error Banner
     *
     * Displays an error message at the top of the chat input area
     *
     * @param message - The error message to display
     */
    function showError(message: string) {
        errorBanner.textContent = `Error: ${message}`;
        errorBanner.classList.add('show');
    }

    /**
     * Hide Error Banner
     *
     * Hides the error message banner
     */
    function hideError() {
        errorBanner.textContent = '';
        errorBanner.classList.remove('show');
    }

    /**
     * Escape HTML
     *
     * Prevents XSS attacks by escaping HTML special characters
     * in user and AI generated content
     *
     * @param text - The text to escape
     * @returns HTML-safe text
     */
    function escapeHtml(text: string): string {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
</script>
