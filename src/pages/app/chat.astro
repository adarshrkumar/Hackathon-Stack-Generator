---
/**
  * AI Chat Interface Page
  *
  * This is the main chat interface for the Stack Generator application.
  * It provides a conversational AI experience powered by AWS Bedrock and Llama 3.1.
  *
  * Features:
  * - Real-time AI chat responses
  * - Thread-based conversation history
  * - Auto-resizing textarea input
  * - Loading indicators
  * - Error handling and display
  * - New chat functionality
  * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)
  *
  * Architecture:
  * - Uses the App layout (Nav + Footer)
  * - Client-side TypeScript for interactivity
  * - Communicates with /api/message/generate endpoint
  * - Stores thread ID for conversation context
  */

// Import the application layout
import App from '../../layouts/App.astro';
---

<!-- Chat Page Content -->
<App title="Stack Generator">
    <!-- Chat Header Section -->
    <div class="chat-header">
        <h1><i class="fa-solid fa-layer-group"></i> Stack Generator</h1>
        <p class="subtitle">Build your perfect tech stack with AI guidance</p>
    </div>

    <!-- Main Chat Wrapper -->
    <div class="chat-wrapper">
        <!-- Chat Messages Container (scrollable) -->
        <div class="chat-messages" id="chatMessages">
            <!-- Messages will be added dynamically -->
        </div>

        <!-- Chat Input Section (fixed at bottom) -->
        <div class="chat-input-container">
            <!-- Error Banner (hidden by default) -->
            <div class="error-banner" id="errorBanner"></div>

            <!-- Input Wrapper (textarea + send button) -->
            <div class="input-wrapper">
                <!-- Message Textarea (auto-resizing) -->
                <textarea
                    id="messageInput"
                    placeholder="Type your message here..."
                    rows="1"
                ></textarea>

                <!-- Send Button -->
                <button id="sendButton" class="send-btn">
                    <i class="fa-solid fa-paper-plane"></i>
                </button>
            </div>

            <!-- Chat Info Bar (thread info + new chat button) -->
            <div class="chat-info">
                <span id="threadInfo">New conversation</span>
                <button id="newChatBtn" class="new-chat-btn">
                    <i class="fa-solid fa-plus"></i> New Chat
                </button>
            </div>
        </div>
    </div>
</App>

<!-- SCSS Styles -->
<style lang="scss">
    @use '../../styles/pages/app/chat.scss';
</style>

<!-- Client-Side TypeScript -->
<script>
    /**
     * CLIENT-SIDE CHAT LOGIC WITH SELECTION PROMPTS
     *
     * This script handles:
     * - Multi-step selection prompts for tech stack preferences
     * - Message sending and receiving
     * - UI updates (adding messages, loading indicators)
     * - Thread management
     * - Error handling
     * - Markdown rendering for AI responses
     */

    import { marked } from 'marked';

    // Configure marked for better rendering
    marked.setOptions({
        breaks: true,  // Convert line breaks to <br>
        gfm: true,     // GitHub Flavored Markdown
    });

    /**
     * SELECTION PROMPTS CONFIGURATION
     */

    const selectionQuestions = [
        {
            question: "What **front-end framework** do you prefer?",
            category: "frontend",
            options: ["React", "Vue.js", "Angular", "Svelte", "Next.js", "Other/Not Sure"]
        },
        {
            question: "What **backend technology** do you prefer?",
            category: "backend",
            options: ["Node.js", "Python", "Java", "Go", "PHP", "Ruby", "Other/Not Sure"]
        },
        {
            question: "How do you want to handle **styling**?",
            category: "styling",
            options: ["Tailwind CSS", "SCSS/SASS", "CSS Modules", "Styled Components", "Bootstrap", "Material-UI", "Other/Not Sure"]
        },
        {
            question: "What **database** do you need?",
            category: "database",
            options: ["PostgreSQL", "MongoDB", "MySQL", "Redis", "DynamoDB", "Firebase", "Other/Not Sure"]
        },
        {
            question: "How do you want to handle **user authentication**?",
            category: "auth",
            options: ["Auth0", "Firebase Auth", "AWS Cognito", "Clerk", "Supabase", "Custom JWT", "Other/Not Sure"]
        },
        {
            question: "Any **additional services** you need? (select multiple or skip)",
            category: "additional",
            multiSelect: true,
            options: ["CDN", "Analytics", "Email Service", "File Storage", "Payment Processing", "Search", "Monitoring", "CI/CD"]
        }
    ];

    let currentQuestionIndex = 0;
    const userSelections: Record<string, string | string[]> = {};
    let selectionInProgress = true;

    /**
     * Chat State Variables
     */

    // Current conversation thread ID (null for new conversations)
    let currentThreadId: string | null = null;

    // In-memory message history (for reference, not sent to API)
    let messageHistory: Array<{ role: 'user' | 'assistant', content: string }> = [];

    /**
     * DOM Element References
     */

    // Selection elements
    const selectionContainer = document.getElementById('selectionContainer')!;
    const selectionOptions = document.getElementById('selectionOptions')!;
    const questionTitle = document.getElementById('questionTitle')!;
    const questionHint = document.getElementById('questionHint')!;
    const backBtn = document.getElementById('backBtn')!;
    const skipBtn = document.getElementById('skipBtn')!;
    const stepIndicators = document.querySelectorAll('.step-indicator');

    // Chat elements
    const chatHeader = document.getElementById('chatHeader')!;
    const chatWrapper = document.getElementById('chatWrapper')!;
    const chatMessages = document.getElementById('chatMessages')!;
    const messageInput = document.getElementById('messageInput') as HTMLTextAreaElement;
    const sendButton = document.getElementById('sendButton') as HTMLButtonElement;
    const errorBanner = document.getElementById('errorBanner')!;
    const threadInfo = document.getElementById('threadInfo')!;
    const newChatBtn = document.getElementById('newChatBtn')!;

    /**
     * SELECTION PROMPT FUNCTIONS
     */

    /**
     * Render current selection question
     */
    function renderQuestion() {
        const question = selectionQuestions[currentQuestionIndex];
        questionTitle.textContent = question.title;
        questionHint.textContent = question.hint;

        // Clear previous options
        selectionOptions.innerHTML = '';

        // Render options
        question.options.forEach(option => {
            const inputType = question.multiSelect ? 'checkbox' : 'radio';
            const optionEl = document.createElement('label');
            optionEl.className = 'selection-option';

            optionEl.innerHTML = `
                <input type="${inputType}" name="${question.category}" value="${option.value}">
                <div class="option-content">
                    <i class="${option.icon}"></i>
                    <span>${option.label}</span>
                </div>
            `;

            selectionOptions.appendChild(optionEl);
        });

        // Update progress indicators
        stepIndicators.forEach((indicator, index) => {
            if (index < currentQuestionIndex) {
                indicator.classList.add('completed');
                indicator.classList.remove('active');
            } else if (index === currentQuestionIndex) {
                indicator.classList.add('active');
                indicator.classList.remove('completed');
            } else {
                indicator.classList.remove('active', 'completed');
            }
        });

        // Update back button visibility
        backBtn.style.display = currentQuestionIndex > 0 ? 'inline-flex' : 'none';

        // Update skip button text for last question
        skipBtn.innerHTML = currentQuestionIndex === selectionQuestions.length - 1
            ? 'Finish & Chat <i class="fa-solid fa-check"></i>'
            : 'Skip <i class="fa-solid fa-forward"></i>';
    }

    /**
     * Handle option selection
     */
    function handleOptionSelect(event: Event) {
        const target = event.target as HTMLElement;
        const input = target.querySelector('input') || target.closest('label')?.querySelector('input');

        if (input) {
            const question = selectionQuestions[currentQuestionIndex];

            if (!question.multiSelect) {
                // For radio buttons, auto-advance after selection
                setTimeout(() => {
                    saveCurrentSelection();
                    nextQuestion();
                }, 300);
            }
        }
    }

    /**
     * Save current question's selection
     */
    function saveCurrentSelection() {
        const question = selectionQuestions[currentQuestionIndex];

        if (question.multiSelect) {
            const checked = selectionOptions.querySelectorAll('input:checked') as NodeListOf<HTMLInputElement>;
            const values = Array.from(checked).map(input => input.value);
            if (values.length > 0) {
                userSelections[question.category] = values;
            }
        } else {
            const checked = selectionOptions.querySelector('input:checked') as HTMLInputElement;
            if (checked) {
                userSelections[question.category] = checked.value;
            }
        }
    }

    /**
     * Go to next question or finish
     */
    function nextQuestion() {
        saveCurrentSelection();

        if (currentQuestionIndex < selectionQuestions.length - 1) {
            currentQuestionIndex++;
            renderQuestion();
        } else {
            finishSelections();
        }
    }

    /**
     * Go to previous question
     */
    function previousQuestion() {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            renderQuestion();
        }
    }

    /**
     * Finish selections and show chat
     */
    async function finishSelections() {
        selectionPhaseComplete = true;

        // Hide selection container
        selectionContainer.style.display = 'none';

        // Show chat interface
        chatHeader.style.display = 'block';
        chatWrapper.style.display = 'flex';

        // Build initial AI prompt based on selections
        const initialPrompt = buildSelectionPrompt(userSelections);

        // Add welcome message with selection summary
        const selectionSummary = buildSelectionSummary(userSelections);
        chatMessages.innerHTML = `
            <div class="message assistant">
                <div class="message-icon">
                    <i class="fa-solid fa-robot"></i>
                </div>
                <div class="message-content">
                    <p><strong>Great! Here's what you're looking for:</strong></p>
                    ${selectionSummary}
                    <p style="margin-top: 1rem;"><strong>Let me analyze your selections and provide personalized recommendations...</strong></p>
                </div>
            </div>
        `;

        // Auto-send the initial prompt to get AI recommendations
        messageInput.value = initialPrompt;
        await sendMessage();
    }

    /**
     * Build AI prompt from selections
     */
    function buildSelectionPrompt(selections: Record<string, string | string[]>): string {
        let prompt = "Based on my technology preferences:\n\n";

        if (selections.frontend) prompt += `- Frontend: ${selections.frontend}\n`;
        if (selections.backend) prompt += `- Backend: ${selections.backend}\n`;
        if (selections.styling) prompt += `- Styling: ${selections.styling}\n`;
        if (selections.database) prompt += `- Database: ${selections.database}\n`;
        if (selections.auth) prompt += `- Authentication: ${selections.auth}\n`;
        if (selections.additional && Array.isArray(selections.additional)) {
            prompt += `- Additional: ${selections.additional.join(', ')}\n`;
        }

        prompt += "\nPlease provide:\n";
        prompt += "1. Why these technologies work well together\n";
        prompt += "2. Specific service/provider recommendations from your knowledge\n";
        prompt += "3. Best practices for integration\n";
        prompt += "4. Any concerns or alternatives\n";
        prompt += "5. Estimated complexity and cost considerations";

        return prompt;
    }

    /**
     * Build selection summary HTML
     */
    function buildSelectionSummary(selections: Record<string, string | string[]>): string {
        let html = '<ul style="list-style: none; padding-left: 0;">';

        if (selections.frontend) html += `<li>✓ Frontend: <strong>${selections.frontend}</strong></li>`;
        if (selections.backend) html += `<li>✓ Backend: <strong>${selections.backend}</strong></li>`;
        if (selections.styling) html += `<li>✓ Styling: <strong>${selections.styling}</strong></li>`;
        if (selections.database) html += `<li>✓ Database: <strong>${selections.database}</strong></li>`;
        if (selections.auth) html += `<li>✓ Auth: <strong>${selections.auth}</strong></li>`;
        if (selections.additional && Array.isArray(selections.additional) && selections.additional.length > 0) {
            html += `<li>✓ Additional: <strong>${selections.additional.join(', ')}</strong></li>`;
        }

        html += '</ul>';
        return html;
    }

    // Selection event listeners
    backBtn.addEventListener('click', previousQuestion);
    skipBtn.addEventListener('click', nextQuestion);
    selectionOptions.addEventListener('click', handleOptionSelect);

    // Initialize first question
    renderQuestion();

    /**
     * Auto-Resize Textarea
     *
     * Automatically adjusts the height of the textarea as the user types
     * to accommodate multi-line messages without manual scrolling
     */
    messageInput.addEventListener('input', () => {
        messageInput.style.height = 'auto';  // Reset height
        messageInput.style.height = messageInput.scrollHeight + 'px';  // Set to content height
    });

    /**
     * Keyboard Shortcut: Enter to Send
     *
     * - Enter: Send message
     * - Shift+Enter: Insert newline (default textarea behavior)
     */
    messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();  // Prevent newline
            sendMessage();       // Send the message
        }
    });

    /**
     * Send Button Click Handler
     */
    sendButton.addEventListener('click', sendMessage);

    /**
     * New Chat Button Handler
     *
     * Prompts the user to confirm starting a new conversation,
     * then resets the chat state and UI
     */
    newChatBtn.addEventListener('click', () => {
        if (confirm('Start a new conversation?')) {
            // Reset state
            currentThreadId = null;
            messageHistory = [];

            // Reset UI to initial welcome message
            chatMessages.innerHTML = `
                <div class="welcome-message">
                    <i class="fa-solid fa-robot"></i>
                    <p>Hello! I'm your AI assistant. Ask me anything!</p>
                </div>
            `;

            // Update thread info
            threadInfo.textContent = 'New conversation';

            // Clear any errors
            hideError();
        }
    });

    /**
     * Send Message Function
     *
     * Handles the complete message sending flow:
     * 1. Validate input
     * 2. Add user message to UI
     * 3. Disable input while processing
     * 4. Send request to API
     * 5. Handle response or errors
     * 6. Re-enable input
     */
    async function sendMessage() {
        // Get and validate message text
        const message = messageInput.value.trim();
        if (!message) return;  // Don't send empty messages

        // Clear input and reset height
        messageInput.value = '';
        messageInput.style.height = 'auto';

        // Add user message to UI immediately for better UX
        addMessage('user', message);
        messageHistory.push({ role: 'user', content: message });

        // Disable input while waiting for response
        setInputState(false);

        // Show loading indicator
        const loadingEl = addLoadingMessage();

        try {
            /**
             * Prepare API Request
             *
             * Include thread ID if this is a continuing conversation
             * Otherwise, the API will create a new thread
             */
            const requestBody: { text: string; id?: string } = { text: message };
            if (currentThreadId) {
                requestBody.id = currentThreadId;
            }

            /**
             * Send Request to API
             *
             * POST to /api/message/generate with the user's message
             * and optional thread ID
             */
            const response = await fetch('/api/message/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestBody),
            });

            // Parse JSON response
            const data = await response.json();

            // Check for HTTP errors
            if (!response.ok) {
                throw new Error(data.error || 'Request failed');
            }

            // Remove loading indicator
            loadingEl.remove();

            /**
             * Add AI Response to UI
             *
             * Display the generated text from the AI model
             */
            addMessage('assistant', data.generatedText);
            messageHistory.push({ role: 'assistant', content: data.generatedText });

            /**
             * Update Thread Info
             *
             * Store the thread ID for future messages
             * Display the conversation title in the UI
             */
            if (data.id) {
                currentThreadId = data.id;
                threadInfo.textContent = `Thread: ${data.generatedTitle || data.id.substring(0, 8)}`;
            }

            // Clear any previous errors
            hideError();

        } catch (error) {
            /**
             * Error Handling
             *
             * Display error to user and remove loading indicator
             * Also remove the user's message from history since it failed
             */
            loadingEl.remove();
            showError(error instanceof Error ? error.message : String(error));

            // Remove the user message from history since request failed
            messageHistory.pop();

        } finally {
            /**
             * Re-enable Input
             *
             * Allow user to send another message and focus the input
             */
            setInputState(true);
            messageInput.focus();
        }
    }

    /**
     * Add Message to UI
     *
     * Creates a message element and appends it to the chat messages container
     * AI messages are rendered as markdown for better formatting
     *
     * @param role - 'user' or 'assistant'
     * @param content - The message text
     */
    function addMessage(role: 'user' | 'assistant', content: string) {
        // Create message container
        const messageEl = document.createElement('div');
        messageEl.className = `message ${role}`;

        // Select appropriate icon
        const icon = role === 'user' ? 'fa-user' : 'fa-robot';

        // Format content based on role
        let formattedContent: string;
        if (role === 'assistant') {
            // Render markdown for AI responses
            formattedContent = marked.parse(content) as string;
        } else {
            // Escape HTML for user messages to prevent XSS
            formattedContent = escapeHtml(content).replace(/\n/g, '<br>');
        }

        // Build message HTML with icon and content
        messageEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid ${icon}"></i>
            </div>
            <div class="message-content">${formattedContent}</div>
        `;

        // Append to chat and scroll to bottom
        chatMessages.appendChild(messageEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    /**
     * Add Loading Message
     *
     * Creates a loading indicator message to show while waiting for AI response
     *
     * @returns The loading element (so it can be removed later)
     */
    function addLoadingMessage(): HTMLElement {
        const loadingEl = document.createElement('div');
        loadingEl.className = 'message assistant loading';

        // Create animated typing indicator
        loadingEl.innerHTML = `
            <div class="message-icon">
                <i class="fa-solid fa-robot"></i>
            </div>
            <div class="message-content">
                <div class="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;

        // Append and scroll to bottom
        chatMessages.appendChild(loadingEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        return loadingEl;
    }

    /**
     * Set Input State
     *
     * Enable or disable the message input and send button
     * Used to prevent multiple simultaneous messages
     *
     * @param enabled - true to enable input, false to disable
     */
    function setInputState(enabled: boolean) {
        messageInput.disabled = !enabled;
        sendButton.disabled = !enabled;
    }

    /**
     * Show Error Banner
     *
     * Displays an error message at the top of the chat input area
     *
     * @param message - The error message to display
     */
    function showError(message: string) {
        errorBanner.textContent = `Error: ${message}`;
        errorBanner.classList.add('show');
    }

    /**
     * Hide Error Banner
     *
     * Hides the error message banner
     */
    function hideError() {
        errorBanner.textContent = '';
        errorBanner.classList.remove('show');
    }

    /**
     * Escape HTML
     *
     * Prevents XSS attacks by escaping HTML special characters
     * in user and AI generated content
     *
     * @param text - The text to escape
     * @returns HTML-safe text
     */
    function escapeHtml(text: string): string {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
</script>
