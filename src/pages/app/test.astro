---
import Layout from '../../layouts/App.astro';
---

<Layout title="API Test">
    <div class="test-container">
        <h1>Message Generation API Test</h1>

        <div class="form-container">
            <label for="message">Enter your message:</label>
            <textarea id="message" rows="4" placeholder="Type your message here..."></textarea>

            <label for="threadId">Thread ID (optional):</label>
            <input type="text" id="threadId" placeholder="Leave empty for new thread" />

            <button id="sendBtn">Send Message</button>
        </div>

        <div class="response-container">
            <h2>Response:</h2>
            <div id="loading" style="display: none;">Loading...</div>
            <div id="error" class="error"></div>
            <div id="response">
                <p><strong>Thread ID:</strong> <span id="responseThreadId"></span></p>
                <p><strong>Title:</strong> <span id="responseTitle"></span></p>
                <div>
                    <strong>Generated Text:</strong>
                    <div id="responseText"></div>
                </div>
            </div>
        </div>
    </div>
</Layout>

<style>
    .test-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
    }

    h1 {
        color: #333;
        margin-bottom: 2rem;
    }

    .form-container {
        background: #f5f5f5;
        padding: 2rem;
        border-radius: 8px;
        margin-bottom: 2rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
        color: #555;
    }

    textarea, input {
        width: 100%;
        padding: 0.75rem;
        margin-bottom: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-family: inherit;
        font-size: 1rem;
    }

    textarea {
        resize: vertical;
    }

    button {
        background: #0066cc;
        color: white;
        padding: 0.75rem 2rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.3s;
    }

    button:hover {
        background: #0052a3;
    }

    button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .response-container {
        background: #fff;
        padding: 2rem;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    #loading {
        color: #0066cc;
        font-style: italic;
    }

    .error {
        color: #cc0000;
        padding: 1rem;
        background: #ffe6e6;
        border-radius: 4px;
        margin-bottom: 1rem;
        display: none;
    }

    .error:not(:empty) {
        display: block;
    }

    #response {
        display: none;
    }

    #response.show {
        display: block;
    }

    #responseText {
        background: #f9f9f9;
        padding: 1rem;
        border-radius: 4px;
        margin-top: 0.5rem;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    #responseThreadId, #responseTitle {
        color: #0066cc;
        font-weight: bold;
    }
</style>

<script>
    const sendBtn = document.getElementById('sendBtn') as HTMLButtonElement;
    const messageInput = document.getElementById('message') as HTMLTextAreaElement;
    const threadIdInput = document.getElementById('threadId') as HTMLInputElement;
    const loading = document.getElementById('loading')!;
    const errorDiv = document.getElementById('error')!;
    const responseDiv = document.getElementById('response')!;
    const responseThreadId = document.getElementById('responseThreadId')!;
    const responseTitle = document.getElementById('responseTitle')!;
    const responseText = document.getElementById('responseText')!;

    sendBtn.addEventListener('click', async () => {
        const message = messageInput.value.trim();

        if (!message) {
            alert('Please enter a message');
            return;
        }

        // Clear previous results
        errorDiv.textContent = '';
        responseDiv.classList.remove('show');
        loading.style.display = 'block';
        sendBtn.disabled = true;

        try {
            const requestBody: { text: string; id?: string } = {
                text: message
            };

            const threadId = threadIdInput.value.trim();
            if (threadId) {
                requestBody.id = threadId;
            }

            console.log('Sending request:', requestBody);

            const response = await fetch('/api/message/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Request failed');
            }

            console.log('Response:', data);

            // Display response
            responseThreadId.textContent = data.id || 'N/A';
            responseTitle.textContent = data.generatedTitle || 'N/A';
            responseText.textContent = data.generatedText || 'No text generated';
            responseDiv.classList.add('show');

            // Update thread ID input for follow-up messages
            if (data.id && !threadIdInput.value) {
                threadIdInput.value = data.id;
            }

        } catch (error) {
            console.error('Error:', error);
            errorDiv.textContent = `Error: ${error instanceof Error ? error.message : String(error)}`;
        } finally {
            loading.style.display = 'none';
            sendBtn.disabled = false;
        }
    });

    // Allow sending with Enter (Ctrl/Cmd + Enter)
    messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
            sendBtn.click();
        }
    });
</script>
